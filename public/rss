<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"><channel><title>Ã¸ value</title><description>a wysiwyg hypertext cyberblog</description><link>http://planner-eagle-44854.netlify.com</link><lastBuildDate>10 Jun 17 11:17 EDT</lastBuildDate><generator>trofaf (https://github.com/PuerkitoBio/trofaf)</generator><item><title>About Go logging for reusable packages</title><link>http://planner-eagle-44854.netlify.com/about-Go-logging</link><description>There are many different logging packages, and it&#39;s not necessarily obvious how to support logging of important events in a reusable package in such a way that those events are logged in the caller application&#39;s preferred destination and format.</description><author>Martin Angers</author><category></category><pubDate>02 Mar 16 00:00 UTC</pubDate></item><item><title>Let the Doer Do it</title><link>http://planner-eagle-44854.netlify.com/Let-the-Doer-Do-it</link><description>There are lots of Go packages out there that make HTTP requests, maybe because they wrap a RESTful API or they do web crawling, etc. Regardless of the reason, at some point they use an *http.Client to make those requests. This article is a recommendation on how I believe this client should be managed.</description><author>Martin Angers</author><category></category><pubDate>16 Feb 16 00:00 UTC</pubDate></item><item><title>A PEG parser generator for Go</title><link>http://planner-eagle-44854.netlify.com/A-PEG-parser-generator-for-Go</link><description>Parsing expression grammars (PEGs) are an interesting alternative to the traditional context-free grammars (CFGs) often seen in the field of programming languages - usually in some flavor of Backus-Naur form. Attributed to Bryan Ford and his 2004 paper, this is a relatively new theory. I spent the last few weeks working on a PEG-based parser generator for Go (think compiler-compiler, a-la yacc/bison). This gave birth to pigeon.</description><author>Martin Angers</author><category></category><pubDate>13 Apr 15 00:00 UTC</pubDate></item><item><title>Dealing with binary files and uglified JSON in Vim</title><link>http://planner-eagle-44854.netlify.com/Dealing-with-binary-files-and-uglified-json-in-Vim</link><description>Long uglified JSON files can be painful to look at. Same thing with binary files that you want to scan visually. Thankfully, a simple Vim configuration can make your life much better.</description><author>Martin Angers</author><category></category><pubDate>16 Jun 14 00:00 UTC</pubDate></item><item><title>Throttled: Guardian Of The Web Server</title><link>http://planner-eagle-44854.netlify.com/throttled--guardian-of-the-web-server</link><description>I just put the finishing touches for the release of throttled, a Go package that implements various strategies to control access to HTTP handlers. Out-of-the-box, it supports rate-limiting of requests, constant interval flow of requests and memory usage thresholds to grant or deny access, but it also provides mechanisms to extend its functionality.</description><author>Martin Angers</author><category></category><pubDate>19 Feb 14 00:00 UTC</pubDate></item></channel></rss>